import asyncio
import requests
import random
import os
import re
import time
import psutil
from datetime import datetime
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from pyrogram.types import *
from pymongo import MongoClient

API_ID = os.environ.get("API_ID", None) 
API_HASH = os.environ.get("API_HASH", None) 
BOT_TOKEN = os.environ.get("BOT_TOKEN", None) 
MONGO_URL = os.environ.get("MONGO_URL", None)
BOT_USERNAME = os.environ.get("BOT_USERNAME") 
UPDATE_CHNL = os.environ.get("UPDATE_CHNL")
OWNER_USERNAME = os.environ.get("OWNER_USERNAME")
SUPPORT_GRP = os.environ.get("SUPPORT_GRP")
BOT_NAME = os.environ.get("BOT_NAME")
START_IMG = os.environ.get("START_IMG")




async def is_admins(chat_id: int):
    return [
        member.user.id
        async for member in bot.iter_chat_members(
            chat_id, filter="administrators"
        )
    ]

START_TIME = datetime.utcnow()
START_TIME_ISO = START_TIME.replace(microsecond=0).isoformat()
TIME_DURATION_UNITS = (
    ("week", 60 * 60 * 24 * 7),
    ("day", 60 * 60 * 24),
    ("hour", 60 * 60),
    ("min", 60),
    ("sec", 1),
)


async def _human_time_duration(seconds):
    if seconds == 0:
        return "inf"
    parts = []
    for unit, div in TIME_DURATION_UNITS:
        amount, seconds = divmod(int(seconds), div)
        if amount > 0:
            parts.append("{} {}{}".format(amount, unit, "" if amount == 1 else "s"))
    return ", ".join(parts)


PHOTO = [
    START_IMG,
]

BACK = [
            [
                InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="back_"),
            ],
        ]

EMOJIOS = [ 
      "üí£",
      "üí•",
      "ü™Ñ",
      "üß®",
      "‚ö°",
      "‚ùÑÔ∏è",
      "üîé",
      "üëª",
      "ü§ß",
      "üé©",
      "üïä",
      "‚≠ê",
]

HELP_TEXT = """
**·¥ús·¥Ä…¢·¥á ‚òüÔ∏éÔ∏éÔ∏é**
‚ûª /chatbot on - **·¥õ·¥è ·¥á…¥·¥Ä ô ü·¥á ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ.**
‚ûª /chatbot off - **·¥õ·¥è ·¥Ö…™s·¥Ä ô ü·¥á ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ.**

‚ûª **…¥·¥è·¥õ·¥á ¬ª**  ô·¥è·¥õ ú ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥°·¥è Ä·¥ã …™…¥ …¢ Ä·¥è·¥ú·¥ò ·¥è…¥ ü è!!
‚ûª /ping - **·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á ·¥ò…™…¥…¢ ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.**

¬©Ô∏è …¥·¥Ä…™…¥·¥Ä-‚úó·¥Ö"""

START_TEXT = """
**‡πè  ú·¥á è, …™ ·¥Ä·¥ç [{BOT_NAME}](t.me/{BOT_USERNAME})**
**‚ûª ·¥Ä…¥ ·¥Ä…™- ô·¥Äs·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ.**
**‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**"""

DEV_OP = [
    [
        InlineKeyboardButton(
            text="·¥Ä·¥Ö·¥Ö ·¥ç·¥á  ô·¥Ä ô è",
            url=f"https://t.me/{BOT_USERNAME}?startgroup=true",
        ),
        InlineKeyboardButton(text="Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=f"https://t.me/{SUPPORT_GRP}"),
    ],
    [
        InlineKeyboardButton(
            text="‚Ä¢  ú·¥á ü·¥ò ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ‚Ä¢",
            callback_data="help",
        ),
    ],
    [
        InlineKeyboardButton(text="·¥Ä ô·¥è·¥ú·¥õ", callback_data="about"),
        InlineKeyboardButton(text="·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á", url=f"https://t.me/{UPDATE_CHNL}"),
    ],
]
PNG_BTN = [
    [
         InlineKeyboardButton(
             text="·¥Ä·¥Ö·¥Ö ·¥ç·¥á  ô·¥Ä ô è",
             url=f"https://t.me/{BOT_USERNAME}?startgroup=true",
         ),
         InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", 
                              url=f"https://t.me/{SUPPORT_GRP}",
         ),
     ],
]

@bot.on_message(filters.command(["start", "aistart", f"start@{BOT_USERNAME}"]))
async def restart(client, m: Message):
    accha = await m.reply_text(
                text = random.choice(EMOJIOS),
    )
    await asyncio.sleep(1)
    await accha.edit("__·¥ÖŒπ–∏g ·¥ÖœÉ–∏g Í®ÑÔ∏é —ï—ÇŒ±—è—ÇŒπ–∏g..__")
    await asyncio.sleep(0.2)
    await accha.edit("__·¥ÖŒπ–∏g ·¥ÖœÉ–∏g Í®Ñ s—ÇŒ±—è—ÇŒπ–∏g.....__")
    await asyncio.sleep(0.2)
    await accha.edit("__·¥ÖŒπ–∏g ·¥ÖœÉ–∏g Í®ÑÔ∏é s—ÇŒ±—è—ÇŒπ–∏g..__")
    await asyncio.sleep(0.2)
    await accha.delete()
    await asyncio.sleep(0.6)
    await m.reply_photo(
        photo = random.choice(PHOTO),
        caption=f"""‡πè  ú·¥á è üíú \n·¥õ ú…™Íú± …™Íú±[{BOT_NAME}](t.me/{BOT_USERNAME}) ·¥õ ú·¥á ·¥ç·¥ès·¥õ ·¥ús·¥á ü·¥áss  ô·¥è·¥õ ·¥á·¥†·¥á Ä ·¥ç·¥Ä·¥Ö·¥á.""",
        reply_markup=InlineKeyboardMarkup(DEV_OP),
    )

async def fallen_ping():
    current_time = datetime.utcnow()
    uptime_sec = (current_time - START_TIME).total_seconds()
    uptime = await _human_time_duration(int(uptime_sec))
    cpu = psutil.cpu_percent(interval=0.5)
    mem = psutil.virtual_memory().percent
    disk = psutil.disk_usage("/").percent
    fallen = f"""
‚ú® ·¥ú·¥©·¥õ…™·¥ç·¥á : {uptime}
‚òÅ ·¥Ñ·¥©·¥ú : {cpu}%
‚ùÑ  Ä·¥Ä·¥ç : {mem}%
‚ù§Ô∏è‚Äçüî• ·¥Ö…™s·¥ã : {disk}%"""
    return fallen

@bot.on_message(filters.command(["ping", "alive", f"ping@{BOT_USERNAME}"]))
async def ping(_, message):
    hmm = await message.reply_photo(
        photo = random.choice(PHOTO),
        caption="**¬ª ·¥©…™…¥…¢…™…¥…¢  ô·¥Ä ô è...**",
    )
    hehe = await fallen_ping()
    start = datetime.now()
    end = datetime.now()
    resp = (end - start).microseconds / 1000
    await hmm.edit_text(
        f"**¬ª ·¥©·¥è…¥…¢  ô·¥Ä ô è !**\n`‚òÅ {resp}`·¥çs\n\n<b><u>{BOT_NAME} s ès·¥õ·¥á·¥ç s·¥õ·¥Ä·¥õs :</u></b>{hehe}",
    )

@bot.on_message(
    filters.command(["chatbot off", f"chatbot@{BOT_USERNAME} off"], prefixes=["/", ".", "?", "-"])
    & ~filters.private)
async def chatbotofd(client, message):
    vickdb = MongoClient(MONGO_URL)    
    vick = vickdb["VickDb"]["Vick"]     
    if message.from_user:
        user = message.from_user.id
        chat_id = message.chat.id
        if user not in (
           await is_admins(chat_id)
        ):
           return await message.reply_text(
                "You are not admin"
            )
    is_vick = vick.find_one({"chat_id": message.chat.id})
    if not is_vick:
        vick.insert_one({"chat_id": message.chat.id})
        await message.reply_text(f"Chatbot Disabled!")
    if is_vick:
        await message.reply_text(f"ChatBot Already Disabled")
    
#start callbacks --------------
@bot.on_callback_query()
async def cb_handler(Client, query: CallbackQuery):
    if query.data == "help":
        buttons = [
            [
                InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="back_"),
            ],
        ]
        await query.message.edit_text(
            HELP_TEXT,
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    elif query.data == "back_":
        await query.message.edit_text(
            text=f"""**‡πè  ú·¥á è üíú \n·¥õ ú…™Íú± …™Íú± [{BOT_NAME}](t.me/{BOT_USERNAME}) ·¥õ ú·¥á ·¥ç·¥ès·¥õ ·¥ús·¥á ü·¥áss  ô·¥è·¥õ ·¥á·¥†·¥á Ä ·¥ç·¥Ä·¥Ö·¥á.""",
            reply_markup=InlineKeyboardMarkup(DEV_OP),
        )
    elif query.data == "about":
        await query.message.edit_text(
            text=f"""**‡πè  ú·¥á è** üíú\n**…™ ·¥Ä·¥ç ·¥Ä…¥ ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥Ä Ä·¥õ…™“ì…™·¥Ñ·¥Ä ü ·¥Ä…¥·¥Ö …¥·¥áx·¥õ  ü·¥á·¥†·¥á ü …™…¥·¥õ·¥á ü ü…™…¢·¥á…¥·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ  ô·¥è·¥õ**.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n**‚ûõ …™“ì  è·¥è·¥ú ·¥Ä Ä·¥á “ì·¥á·¥á ü…™…¥…¢  ü·¥è…¥·¥á ü è,  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä ü·¥°·¥Ä ès ·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥ç·¥á ·¥Ä…¥·¥Ö ·¥Ñ ú·¥Ä·¥õ ·¥°…™·¥õ ú ·¥ç·¥á**\n**‚ûõ ·¥õ·¥Ä·¥ò ·¥è…¥  ú·¥á ü·¥ò  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è ·¥ã…¥·¥è·¥° ·¥ç è ·¥Ä ô…™ ü…™·¥õ…™·¥ás** √ó√ó""",
            reply_markup=InlineKeyboardMarkup(BACK),
        )

#--------------------------

@bot.on_message(
    filters.command(["chatbot on", f"chatbot@{BOT_USERNAME} on"] ,prefixes=["/", ".", "?", "-"])
    & ~filters.private)
async def chatboton(client, message):
    vickdb = MongoClient(MONGO_URL)    
    vick = vickdb["VickDb"]["Vick"]     
    if message.from_user:
        user = message.from_user.id
        chat_id = message.chat.id
        if user not in (
            await is_admins(chat_id)
        ):
            return await message.reply_text(
                "You are not admin"
            )
    is_vick = vick.find_one({"chat_id": message.chat.id})
    if not is_vick:           
        await message.reply_text(f"Chatbot Already Enabled")
    if is_vick:
        vick.delete_one({"chat_id": message.chat.id})
        await message.reply_text(f"ChatBot Enabled!")
    

@bot.on_message(
    filters.command(["chatbot", f"chatbot@{BOT_USERNAME}"], prefixes=["/", ".", "?", "-"])
    & ~filters.private)
async def chatbot(client, message):
    await message.reply_text(f"**·¥ús·¥Ä…¢·¥á:**\n/**chatbot [on/off]**\n**·¥Ñ ú·¥Ä·¥õ- ô·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö(s) ·¥°·¥è Ä·¥ã …™…¥ …¢ Ä·¥è·¥ú·¥ò ·¥è…¥ ü è!**")


@bot.on_message(
 (
        filters.text
        | filters.sticker
    )
    & ~filters.private
    & ~filters.bot,
)
async def vickai(client: Client, message: Message):

   chatdb = MongoClient(MONGO_URL)
   chatai = chatdb["Word"]["WordDb"]   

   if not message.reply_to_message:
       vickdb = MongoClient(MONGO_URL)
       vick = vickdb["VickDb"]["Vick"] 
       is_vick = vick.find_one({"chat_id": message.chat.id})
       if not is_vick:
           await bot.send_chat_action(message.chat.id, "typing")
           K = []  
           is_chat = chatai.find({"word": message.text})  
           k = chatai.find_one({"word": message.text})      
           if k:               
               for x in is_chat:
                   K.append(x['text'])          
               hey = random.choice(K)
               is_text = chatai.find_one({"text": hey})
               Yo = is_text['check']
               if Yo == "sticker":
                   await message.reply_sticker(f"{hey}")
               if not Yo == "sticker":
                   await message.reply_text(f"{hey}")
   
   if message.reply_to_message:  
       vickdb = MongoClient(MONGO_URL)
       vick = vickdb["VickDb"]["Vick"] 
       is_vick = vick.find_one({"chat_id": message.chat.id})    
       getme = await bot.get_me()
       bot_id = getme.id                             
       if message.reply_to_message.from_user.id == bot_id: 
           if not is_vick:                   
               await bot.send_chat_action(message.chat.id, "typing")
               K = []  
               is_chat = chatai.find({"word": message.text})
               k = chatai.find_one({"word": message.text})      
               if k:       
                   for x in is_chat:
                       K.append(x['text'])
                   hey = random.choice(K)
                   is_text = chatai.find_one({"text": hey})
                   Yo = is_text['check']
                   if Yo == "sticker":
                       await message.reply_sticker(f"{hey}")
                   if not Yo == "sticker":
                       await message.reply_text(f"{hey}")
       if not message.reply_to_message.from_user.id == bot_id:          
           if message.sticker:
               is_chat = chatai.find_one({"word": message.reply_to_message.text, "id": message.sticker.file_unique_id})
               if not is_chat:
                   chatai.insert_one({"word": message.reply_to_message.text, "text": message.sticker.file_id, "check": "sticker", "id": message.sticker.file_unique_id})
           if message.text:                 
               is_chat = chatai.find_one({"word": message.reply_to_message.text, "text": message.text})                 
               if not is_chat:
                   chatai.insert_one({"word": message.reply_to_message.text, "text": message.text, "check": "none"})    
               

@bot.on_message(
 (
        filters.sticker
        | filters.text
    )
    & ~filters.private
    & ~filters.bot,
)
async def vickstickerai(client: Client, message: Message):

   chatdb = MongoClient(MONGO_URL)
   chatai = chatdb["Word"]["WordDb"]   

   if not message.reply_to_message:
       vickdb = MongoClient(MONGO_URL)
       vick = vickdb["VickDb"]["Vick"] 
       is_vick = vick.find_one({"chat_id": message.chat.id})
       if not is_vick:
           await bot.send_chat_action(message.chat.id, "typing")
           K = []  
           is_chat = chatai.find({"word": message.sticker.file_unique_id})      
           k = chatai.find_one({"word": message.text})      
           if k:           
               for x in is_chat:
                   K.append(x['text'])
               hey = random.choice(K)
               is_text = chatai.find_one({"text": hey})
               Yo = is_text['check']
               if Yo == "text":
                   await message.reply_text(f"{hey}")
               if not Yo == "text":
                   await message.reply_sticker(f"{hey}")
   
   if message.reply_to_message:
       vickdb = MongoClient(MONGO_URL)
       vick = vickdb["VickDb"]["Vick"] 
       is_vick = vick.find_one({"chat_id": message.chat.id})
       getme = await bot.get_me()
       bot_id = getme.id
       if message.reply_to_message.from_user.id == bot_id: 
           if not is_vick:                    
               await bot.send_chat_action(message.chat.id, "typing")
               K = []  
               is_chat = chatai.find({"word": message.text})
               k = chatai.find_one({"word": message.text})      
               if k:           
                   for x in is_chat:
                       K.append(x['text'])
                   hey = random.choice(K)
                   is_text = chatai.find_one({"text": hey})
                   Yo = is_text['check']
                   if Yo == "text":
                       await message.reply_text(f"{hey}")
                   if not Yo == "text":
                       await message.reply_sticker(f"{hey}")
       if not message.reply_to_message.from_user.id == bot_id:          
           if message.text:
               is_chat = chatai.find_one({"word": message.reply_to_message.sticker.file_unique_id, "text": message.text})
               if not is_chat:
                   toggle.insert_one({"word": message.reply_to_message.sticker.file_unique_id, "text": message.text, "check": "text"})
           if message.sticker:                 
               is_chat = chatai.find_one({"word": message.reply_to_message.sticker.file_unique_id, "text": message.sticker.file_id})                 
               if not is_chat:
                   chatai.insert_one({"word": message.reply_to_message.sticker.file_unique_id, "text": message.sticker.file_id, "check": "none"})    
               


@bot.on_message(
    (
        filters.text
        | filters.sticker
    )
    & filters.private
    & ~filters.bot,
)
async def vickprivate(client: Client, message: Message):

   chatdb = MongoClient(MONGO_URL)
   chatai = chatdb["Word"]["WordDb"]
   if not message.reply_to_message: 
       await bot.send_chat_action(message.chat.id, "typing")
       K = []  
       is_chat = chatai.find({"word": message.text})                 
       for x in is_chat:
           K.append(x['text'])
       hey = random.choice(K)
       is_text = chatai.find_one({"text": hey})
       Yo = is_text['check']
       if Yo == "sticker":
           await message.reply_sticker(f"{hey}")
       if not Yo == "sticker":
           await message.reply_text(f"{hey}")
   if message.reply_to_message:            
       getme = await bot.get_me()
       bot_id = getme.id       
       if message.reply_to_message.from_user.id == bot_id:                    
           await bot.send_chat_action(message.chat.id, "typing")
           K = []  
           is_chat = chatai.find({"word": message.text})                 
           for x in is_chat:
               K.append(x['text'])
           hey = random.choice(K)
           is_text = chatai.find_one({"text": hey})
           Yo = is_text['check']
           if Yo == "sticker":
               await message.reply_sticker(f"{hey}")
           if not Yo == "sticker":
               await message.reply_text(f"{hey}")
       

@bot.on_message(
 (
        filters.sticker
        | filters.text
    )
    & filters.private
    & ~filters.bot,
)
async def vickprivatesticker(client: Client, message: Message):

   chatdb = MongoClient(MONGO_URL)
   chatai = chatdb["Word"]["WordDb"] 
   if not message.reply_to_message:
       await bot.send_chat_action(message.chat.id, "typing")
       K = []  
       is_chat = chatai.find({"word": message.sticker.file_unique_id})                 
       for x in is_chat:
           K.append(x['text'])
       hey = random.choice(K)
       is_text = chatai.find_one({"text": hey})
       Yo = is_text['check']
       if Yo == "text":
           await message.reply_text(f"{hey}")
       if not Yo == "text":
           await message.reply_sticker(f"{hey}")
   if message.reply_to_message:            
       getme = await bot.get_me()
       bot_id = getme.id       
       if message.reply_to_message.from_user.id == bot_id:                    
           await bot.send_chat_action(message.chat.id, "typing")
           K = []  
           is_chat = chatai.find({"word": message.sticker.file_unique_id})                 
           for x in is_chat:
               K.append(x['text'])
           hey = random.choice(K)
           is_text = chatai.find_one({"text": hey})
           Yo = is_text['check']
           if Yo == "text":
               await message.reply_text(f"{hey}")
           if not Yo == "text":
               await message.reply_sticker(f"{hey}")


bot.run()
